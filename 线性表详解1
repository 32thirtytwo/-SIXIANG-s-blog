# 线性表详解1
泥萌好，欢迎来到我这只蒟蒻的笔记。本蒟蒻会用十分通俗易懂的语言和代码帮助一些和我一样的萌新，~~省的看一圈大佬的神解法~~由于窝不会什么太高深的语法，所以泥萌可以放心食用。  
————————华丽的分割线——————————  
## part 1.1顺序表简介与线性表的基本操作
顺序表应该是最容易理解的一种了吧，因为它的逻辑顺序与物理顺序是一样滴。所谓的逻辑顺序就是它的元素应该是神马丫子滴，而物理顺序就是它实际存储的位置，也就是说理应存放那个元素的盒子就存放着那个元素，所以这也差不多是个数组的操作。 

列一个表会更清楚的展现它的特点： 


|序号  |元素  |
| -----------: | -----------: |
|1 | A |
|2 | B |
|3 | C |
|4 | D |
|5 | E |
|6 |   |




一般来说，线性表有三种操作，那就是访问（说实话就是找到）第i个元素，删除第i个元素，在i的位置插入一个元素。  
——————————————————————————  
## part1.2顺序表三种操作的实现
线性表的查找很简单，只要用一个数组存储元素，并输出下标为i的数就行了，在程序中我就不写了，时间复杂度为$O(1)$。

线性表的删除其实本质上就是个数组前移（自己理解下）。假设任何位置平均删除的概率相同，则删除的平均移动次数为：  
$\sum\limits_{i=1}^n\dfrac{n-i}{n}=\dfrac{n(n-1)}{2n}=\dfrac{n-1}{2}$    
时间复杂度为$O(n)$  


线性表的插入本质上是数组元素后移空出一个位置留给插入的元素。假设任何位置平均插入的概率相同，则插入的平均移动次数为：   
$\sum\limits_{i=1}^n\dfrac{n-i+1}{n+1}=\dfrac{n(n+1)}{2(n+1)}=\dfrac{n}{2}$    
时间复杂度也为$O(n)$  

——————————————————————————
## part1.3顺序表模板程序实现
```cpp
#include<iostream>
using namespace std;
int a[10000000];
int n,m;
void _erase(int i)//删除
{
	for(int p=i+1;p<=n;p++)//数组前移
	a[p-1]=a[p]; 
	n-=1;//链表长度-1
}
void _insert(int i,int h)//插入
{
	for(int p=n;p>=i;p--)//数组后移
	a[p+1]=a[p];
	a[i]=h;
	n++;//链表长度+1
}
void output()//输出
{
	for(int p=1;p<=n;p++)
	cout<<a[p]<<" ";
	cout<<endl; 
} 
int main()
{
	cout<<"线性表模拟"<<endl;
	cout<<"请输入线性表长度"<<endl; 
	cin>>n;	
	cout<<"请输入初始线性表"<<endl;
	for(int p=1;p<=n;p++)
	cin>>a[p];
	cout<<"请输入一共要操作的次数"<<endl;
	cin>>m;
	int c,z,h;
	for(int p=1;p<=m;p++)
	{
		cout<<"请输入要进行的操作（1为删除，2为插入）"<<endl; 
		cin>>c; 
		if(c==1)
		{
			cout<<"请输入要删除的元素的位置"<<endl;
			cin>>z;
			cout<<"第"<<p<<"次是删除，操作后为："<<endl; 
			_erase(z);
		}
		else
		{
			cout<<"请输入要插入的元素的位置和要插入的元素"<<endl;
			cin>>z>>h;
			cout<<"第"<<p<<"次是插入，操作后为："<<endl;
			_insert(z,h);
		}
		output();
	}
}
```
听完了我这只大蒟蒻的通俗易懂的讲解，有木有理解呢？
